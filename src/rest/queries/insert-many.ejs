<%
/**
 * 
 * ----
 * 
 * ### `/src/...`
 * 
 * @name `unnamed template`
 * @type [EJS template]
 * @has 
 * @uses 
 * @modifies 
 * @receives 
 * @returns 
 * @throws 
 * @description 
 * 
 */

const table = sqlString.escapeId(actorClass.Table);
const data = [].concat(parameters.input.data);
if(data.length === 0) {
  throw new Error("Required <data> to have some key on <insert-many.ejs> [ERR:388]");
}
if(typeof data[0] !== "object") {
  throw new Error("Required <data.*> to be objects on <insert-many.ejs> [ERR:883]");
}
const authentication = cms.utils.getAuthentication(parameters.request);
const fieldsList = Object.keys(data[0]).filter(column => cms.utils.checkRestPermissionsTo(authentication, "post", actorClass.Table, column));
const fields = cms.utils.toInsertFieldsSql(fieldsList);
const values = data.map(item => {
  if(typeof item !== "object") {
    throw new Error("Required <data.*> to be (all) object on <insert-many.ejs> [ERR:308]");
  }
  const output = [];
  for(let index=0; index < fieldsList.length; index++) {
    const field = fieldsList[index];
    if(field in item) {
      output.push(item[field]);
    } else {
      output.push(undefined);
    }
  }
  return cms.utils.toInsertValuesSql(output);
});

%>
# insert many:
INSERT INTO <%-table%> (
    <%-fields%>
) VALUES (
    <%-values.join("\n), (\n    ")%>
);