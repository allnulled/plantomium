<%
/**
 * 
 * ----
 * 
 * ### `/src/...`
 * 
 * @name `unnamed template`
 * @type [EJS template]
 * @has 
 * @uses 
 * @modifies 
 * @receives 
 * @returns 
 * @throws 
 * @description 
 * 
 */

const table = sqlString.escapeId(actorClass.Table);
const columnKeys = Object.keys(actorClass.Schema.columns);
const fields = columnKeys.map(ck => sqlString.escapeId(ck));
const values = [];
const data = [].concat(parameters.input.data);
for(let indexData=0; indexData < data.length; indexData++) {
  const item = data[indexData];
  values[indexData] = [];
  for(let index=0; index < columnKeys.length; index++) {
    const field = columnKeys[index];
    const fieldValue = item[field] || null;
    const value = sqlString.escape(fieldValue);
    values[indexData].push(value);
  }
}
%>
INSERT INTO <%-table%> (
    <%-fields.join(",\n    ")%>
) VALUES (
    <%-values.map(value => value.join(", ")).join("\n), (\n    ")%>
);